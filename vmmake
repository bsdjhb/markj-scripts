#!/bin/sh

#
# todo:
#   - support for incremental rebuilds of images
#

usage()
{
    echo "usage: $(basename $0) [-t] [-a <arch>] [-p <pkgs>] [-s <size>]" >&2
    exit 1
}

# Bootstrap packages.
bootstrap()
{
    local md mdir oldifs pfile pkgs

    pfile=$1
    pkgs=$2

    md=$(mdconfig -f $pfile)
    mdir=$(mktemp -d)

    mount /dev/$md $mdir

    # Set up to install packages.
    cp -f /etc/resolv.conf ${mdir}/etc/resolv.conf
    chroot ${mdir} env ASSUME_ALWAYS_YES=yes /usr/sbin/pkg bootstrap -y

    # Do the thing.
    oldifs=$IFS
    IFS=, # XXX is this a valid separator?
    for pkg in ${pkgs}; do
        chroot ${mdir} env ASSUME_ALWAYS_YES=yes /usr/local/sbin/pkg install $pkg
    done
    IFS=$oldifs

    # Clean up, clean up.
    umount $mdir
    rmdir $mdir
    mdconfig -d -u ${md#md}
}

cleanup()
{
    if [ $TMPFS ]; then
        umount $DESTDIR
    else
        rm -rf $DESTDIR
    fi

    rm -f $PARTFILE
}

# Manually add a file to the image.
logfile()
{
    local file root size

    file=$1
    root=$2

    size=$(stat -f '%z' ${root}/${file})
    echo "./$file type=file uname=root gname=wheel mode=0644 size=$size" >> ${root}/METALOG
}

# Create custom system configuration files.
install_config()
{
    local destdir fstab rcconf srcconf sshdconf

    destdir=$1

    fstab=etc/fstab
    cat > ${destdir}/$fstab <<__EOF__
/dev/gpt/rootfs / ufs rw 1 1
/dev/gpt/swapfs none swap sw 0 0
${IPADDR}:$(pwd) /usr/src nfs ro 0 0
__EOF__

    rcconf=etc/rc.conf
    cat > ${destdir}/$rcconf <<__EOF__
ifconfig_vtnet0="DHCP"

sendmail_enable="NONE"
sshd_enable="YES"
__EOF__

    srcconf=etc/src.conf
    cat > ${destdir}/$srcconf <<__EOF__
KERNCONF?= BHYVE
__EOF__

    logfile $fstab $destdir
    logfile $rcconf $destdir
    logfile $srcconf $destdir

    # Fixup sshd config so that root can log in.
    sshdconf=etc/ssh/sshd_config
    sed -i '' 's/^#PermitRootLogin.*$/PermitRootLogin yes/' ${destdir}/$sshdconf
    sed -i '' 's/^#PermitEmptyPasswords.*$/PermitEmptyPasswords yes/' ${destdir}/$sshdconf
    sed -i '' '/^\.\/etc\/ssh\/sshd_config/d' ${destdir}/METALOG
    logfile $sshdconf $destdir
}

#
# Execution begins here.
#

set -e

ARCH=$(uname -m)
IPADDR=
PARTSIZE=10g
PACKAGES=
TMPFS=
while getopts a:i:p:s:t o; do
    case "$o" in
    a)
        ARCH=$OPTARG
        ;;
    i)
        IPADDR=$OPTARG
        ;;
    p)
        PACKAGES=$OPTARG
        ;;
    s)
        PARTSIZE=$OPTARG
        ;;
    t)
        TMPFS=1
        ;;
    ?)
        usage
        ;;
    esac
done

if [ -n "$PACKAGES" -a $(id -u) -ne 0 ]; then
    echo "$(basename $0): must be root to install packages" >&2
    exit 1
elif [ "$TMPFS" -a $(id -u) -ne 0 ]; then
    echo "$(basename $0): must be root to use tmpfs" >&2
    exit 1
fi

if [ -z "$IPADDR" ]; then
    ifconfig bridge0 >/dev/null || exit 1
    IPADDR=$(ifconfig bridge0 | grep -E '^[[:space:]]*inet' | head -n 1 | awk '{print $2}')
fi

IMAGE=$1
OBJDIR=/usr/obj/$(readlink -f $(pwd))
PARTFILE=$(mktemp)

DESTDIR=$(mktemp -d)
if [ $TMPFS ]; then
    mount -t tmpfs tmpfs $DESTDIR
fi

trap "cleanup; exit 1" EXIT SIGINT SIGHUP SIGTERM

make -s -DNO_ROOT DESTDIR=$DESTDIR KERNCONF=BHYVE \
    installworld installkernel distribution

install_config $DESTDIR

makefs -B little -f $(cat ${DESTDIR}/METALOG | wc -l) -o label=VM -M $PARTSIZE \
    -F ${DESTDIR}/METALOG $PARTFILE $DESTDIR

if [ -n "$PACKAGES" ]; then
    bootstrap $PARTFILE $PACKAGES
fi

mkimg -s gpt -f raw -b ${OBJDIR}/sys/boot/i386/pmbr \
    -p freebsd-boot/bootfs:=${OBJDIR}/sys/boot/i386/gptboot/gptboot \
    -p freebsd-swap/swapfs::2G \
    -p freebsd-ufs/rootfs:=${PARTFILE} \
    -o /tmp/vm.raw

rm -f $PARTFILE
